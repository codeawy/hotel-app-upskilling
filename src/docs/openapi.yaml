openapi: 3.0.0
info:
  title: Hotel Management API
  version: 1.0.0
  description: API documentation for Hotel Management System
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Room:
      type: object
      properties:
        id:
          type: integer
        roomNumber:
          type: string
        description:
          type: string
        roomStatus:
          type: string
          enum: [Available, Booked, Under_Maintenance]
        roomType:
          type: string
          enum: [Single, Double, Triple]
        pricePerNight:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateRoom:
      type: object
      required:
        - roomNumber
        - roomStatus
        - roomType
        - pricePerNight
      properties:
        roomNumber:
          type: string
        description:
          type: string
        roomStatus:
          type: string
          enum: [Available, Booked, Under_Maintenance]
        roomType:
          type: string
          enum: [Single, Double, Triple]
        pricePerNight:
          type: number

    UpdateRoom:
      type: object
      properties:
        roomNumber:
          type: string
        description:
          type: string
        roomStatus:
          type: string
          enum: [Available, Booked, Under_Maintenance]
        roomType:
          type: string
          enum: [Single, Double, Triple]
        pricePerNight:
          type: number

    PaginationMetadata:
      type: object
      properties:
        currentPage:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer

paths:
  # Auth Routes
  /auth/v1/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
        "500":
          description: Server error
  /auth/v1/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        "500":
          description: Server error

  # Admin Routes
  /admin/v1/rooms:
    get:
      summary: Get all rooms
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: orderBy
          schema:
            type: string
          description: Order by field and direction (e.g., createdAt:desc)
      responses:
        "200":
          description: Successfully retrieved rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Room"
                  metadata:
                    $ref: "#/components/schemas/PaginationMetadata"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    post:
      summary: Create a new room
      tags:
        - Admin
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoom"
      responses:
        "201":
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/v1/rooms/{id}:
    get:
      summary: Get a room by ID
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully retrieved room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Room not found
    patch:
      summary: Update a room
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoom"
      responses:
        "200":
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Room not found
    delete:
      summary: Delete a room
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Room deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Room not found
